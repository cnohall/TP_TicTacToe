{"version":3,"sources":["App.tsx","serviceWorker.js","index.js"],"names":["Player","ONGOING_GAME","App","state","board","None","nextPlayerTurn","One","gameIsWon","checkIfGameIsOver","i","length","createOnClickHandler","index","newBoard","slice","newGameIsWon","setState","renderStatus","winningtext","style","margin","renderCell","className","onClick","data-player","renderBoard","map","value","key","this","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"gKAMKA,E,2EAFCC,G,OAAgB,I,SAEjBD,O,eAAAA,I,aAAAA,I,cAAAA,M,SA2GUE,E,2MA5FLC,MAAQ,CACdC,MAAO,CAACJ,EAAOK,KAAML,EAAOK,KAAML,EAAOK,KAAML,EAAOK,KAAML,EAAOK,KAAML,EAAOK,KAAML,EAAOK,KAAML,EAAOK,KAAML,EAAOK,MACvHC,eAAgBN,EAAOO,IACvBC,UAAWP,G,EAGNQ,kBAAoB,SAACL,GAE1B,GAAIA,EAAM,KAAOA,EAAM,IAAMA,EAAM,KAAOA,EAAM,IAAMA,EAAM,KAAOJ,EAAOK,KACxE,OAAOD,EAAM,GACR,GAAIA,EAAM,KAAOA,EAAM,IAAMA,EAAM,KAAOA,EAAM,IAAMA,EAAM,KAAOJ,EAAOK,KAC/E,OAAOD,EAAM,GACR,GAAIA,EAAM,KAAOA,EAAM,IAAMA,EAAM,KAAOA,EAAM,IAAMA,EAAM,KAAOJ,EAAOK,KACjF,OAAOD,EAAM,GACN,GAAIA,EAAM,KAAOA,EAAM,IAAMA,EAAM,KAAOA,EAAM,IAAMA,EAAM,KAAOJ,EAAOK,KAC/E,OAAOD,EAAM,GACR,GAAIA,EAAM,KAAOA,EAAM,IAAMA,EAAM,KAAOA,EAAM,IAAMA,EAAM,KAAOJ,EAAOK,KAC/E,OAAOD,EAAM,GACR,GAAIA,EAAM,KAAOA,EAAM,IAAMA,EAAM,KAAOA,EAAM,IAAMA,EAAM,KAAOJ,EAAOK,KAC/E,OAAOD,EAAM,GACR,GAAIA,EAAM,KAAOA,EAAM,IAAMA,EAAM,KAAOA,EAAM,IAAMA,EAAM,KAAOJ,EAAOK,KAC/E,OAAOD,EAAM,GACR,GAAIA,EAAM,KAAOA,EAAM,IAAMA,EAAM,KAAOA,EAAM,IAAMA,EAAM,KAAOJ,EAAOK,KAC/E,OAAOD,EAAM,GAGf,IAAK,IAAIM,EAAI,EAAGA,EAAGN,EAAMO,OAAQD,IAC/B,GAAIN,EAAMM,KAAOV,EAAOK,KACtB,OAAOJ,EAGX,OAAOD,EAAOK,M,EAGTO,qBAAuB,SAACC,GAAD,OAAmB,WAAO,IAAD,EACR,EAAKV,MAA1CC,EAD6C,EAC7CA,MAAOE,EADsC,EACtCA,eAEf,GAHqD,EACtBE,YAEbP,GAAgBG,EAAMS,KAAWb,EAAOK,KAA1D,CAIA,IAAMS,EAAWV,EAAMW,QACvBD,EAASD,GAASP,EAElB,IAAMU,EAAe,EAAKP,kBAAkBK,GAE5C,EAAKG,SAAS,CAAEb,MAAOU,EAAUR,eAAgB,EAAIA,EAAgBE,UAAWQ,O,EAG3EE,aAAe,WAAO,IACpBV,EAAa,EAAKL,MAAlBK,UACDW,EAAcX,IAAcR,EAAOK,KAArB,iBAAsCG,EAAtC,QAAwD,sBAC5E,OAAO,yBAAKY,MAAO,CAACC,OAAQ,SACzB,qCADI,IACkC,6BACtCb,IAAcP,EAAe,iBAAmBkB,I,EAI9CG,WAAa,SAACT,GAAmB,IAC9BT,EAAU,EAAKD,MAAfC,MAGR,OAAO,yBAAKmB,UAAU,OAAOC,QAAU,EAAKZ,qBAAqBC,GAAQY,cAAerB,EAAMS,M,EAIzFa,YAAc,WAAO,IAClBtB,EAAU,EAAKD,MAAfC,MAER,OAAO,yBAAKmB,UAAU,mBACrBnB,EAAMuB,KAAI,SAACC,EAAOC,GAAR,OAAgB,EAAKP,WAAWO,Q,wEAK3C,OACE,yBAAKN,UAAU,OACb,4BAAQA,UAAU,cAClB,qDAGCO,KAAKJ,cACLI,KAAKZ,qB,GAnFIa,IAAMC,WCRJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.2d2cc67c.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\n\ntype ONGOING_GAME = -1\nconst ONGOING_GAME = -1\n\nenum Player {\n  None = 0,\n  One = 1,\n  Two = 2\n}\n\n\n\ninterface IState {\n  board: Player[],\n  nextPlayerTurn: Player,\n  gameIsWon: Player | ONGOING_GAME\n}\n\nclass App extends React.Component<{}, IState> {\n  public  state = {\n    board: [Player.None, Player.None, Player.None, Player.None, Player.None, Player.None, Player.None, Player.None, Player.None],\n    nextPlayerTurn: Player.One,\n    gameIsWon: ONGOING_GAME\n  }\n\n  public checkIfGameIsOver = (board: Player[]) => {\n\n    if (board[0] === board[1] && board[1] === board[2] && board[2] !== Player.None) {\n      return board[0]\n    } else if (board[3] === board[4] && board[4] === board[5] && board[5] !== Player.None) {\n      return board[3]\n    } else if (board[6] === board[7] && board[7] === board[8] && board[8] !== Player.None) {\n    return board[6]\n    } else if (board[0] === board[3] && board[3] === board[6] && board[6] !== Player.None) {\n      return board[0]\n    } else if (board[1] === board[4] && board[4] === board[7] && board[7] !== Player.None) {\n      return board[1]\n    } else if (board[2] === board[5] && board[5] === board[8] && board[8] !== Player.None) {\n      return board[2]\n    } else if (board[0] === board[4] && board[4] === board[8] && board[8] !== Player.None) {\n      return board[0]\n    } else if (board[2] === board[4] && board[4] === board[6] && board[6] !== Player.None) {\n      return board[2]\n    } \n\n    for (let i = 0; i <board.length; i++){\n      if (board[i] === Player.None) {\n        return ONGOING_GAME\n      }\n    }\n    return Player.None\n  }\n  \n  public createOnClickHandler = (index: number) => () => {\n    const { board, nextPlayerTurn, gameIsWon } = this.state\n\n    if (gameIsWon !== ONGOING_GAME || board[index] !== Player.None){\n      return\n    }\n\n    const newBoard = board.slice()\n    newBoard[index] = nextPlayerTurn\n    \n    const newGameIsWon = this.checkIfGameIsOver(newBoard)\n\n    this.setState({ board: newBoard, nextPlayerTurn: 3 - nextPlayerTurn, gameIsWon: newGameIsWon})\n  }\n\n  public renderStatus = () => {\n    const {gameIsWon} = this.state\n    const winningtext = gameIsWon !== Player.None ? `Player ${gameIsWon} won` : \"The game is a draw!\"\n    return <div style={{margin: \"25px\"}}>\n      {\"Player 1 is green, Player 2 is red\"} <br/>\n      {gameIsWon === ONGOING_GAME ? 'Game is onging' : winningtext}\n    </div>\n  }\n\n  public renderCell = (index: number) => {\n    const { board } = this.state\n\n\n    return <div className=\"cell\" onClick= {this.createOnClickHandler(index)} data-player = {board[index]}  />\n    \n  }\n\n  public renderBoard = () => {\n    const { board } = this.state\n\n    return <div className=\"board-container\">\n    {board.map((value, key) => this.renderCell(key))}\n    </div>\n  }\n\n  public render(){\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n        <p>\n          Tic Tac Toe by cnohall\n        </p>\n        {this.renderBoard()}\n        {this.renderStatus()}\n\n        </header>\n      </div>\n\n    );\n  }\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}